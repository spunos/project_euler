# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1, 3
#      6: 1, 2, 3, 6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

primes = [2,3]
triangleNums = [1,3,6]

# find all GCDs of a number and add any found prime numbers to the primes list
def findDivs(num):
    p = 0
    divs = []
    while (p < len(primes)):
        prime = primes[p]
        while (prime * prime <= num and num % prime == 0):
            divs.append(prime)
            num /= prime
            if (num == 1):
                return divs
        p += 1
    primes.append(num)
    divs.append(num)
    return divs

# take the GCDs of a number and calculate the number of divisors
def findAllDivs(divs):
    total = 1
    while (len(divs) > 0):
        currentDiv = divs[0]
        count = divs.count(currentDiv)
        total *= count + 1
        divs = divs[count:]
    return total

prev = 3
c = 0

for i in range(4,100000):
    divs = findDivs(i)
    c += 1
    if (c == (prev + 1)): # this is a triangle number
        triangleNums.append(triangleNums[-1] + c)
        prev = c
        c = 0
    if (i in triangleNums):
        total = findAllDivs(divs)
        if (total > 500):
            print(i, ": ", total)
